// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notion.Sync.Api.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Notion.Sync.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251012075759_AddArticleSlug")]
    partial class AddArticleSlug
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Notion.Sync.Api.Models.Article", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.NotionArticle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ArticleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastEditedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId")
                        .IsUnique();

                    b.ToTable("NotionArticles");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.NotionArticleSubTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NotionArticleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubTagId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubTagId");

                    b.HasIndex("NotionArticleId", "SubTagId")
                        .IsUnique();

                    b.ToTable("NotionArticleSubTags");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.NotionArticleTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NotionArticleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("NotionArticleId", "TagId")
                        .IsUnique();

                    b.ToTable("NotionArticleTags");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.SubTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastEditedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("SubTags");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastEditedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.NotionArticle", b =>
                {
                    b.HasOne("Notion.Sync.Api.Models.Article", "Article")
                        .WithOne("NotionArticle")
                        .HasForeignKey("Notion.Sync.Api.Models.NotionArticle", "ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.NotionArticleSubTag", b =>
                {
                    b.HasOne("Notion.Sync.Api.Models.NotionArticle", "NotionArticle")
                        .WithMany("NotionArticleSubTags")
                        .HasForeignKey("NotionArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Notion.Sync.Api.Models.SubTag", "SubTag")
                        .WithMany("NotionArticleSubTags")
                        .HasForeignKey("SubTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotionArticle");

                    b.Navigation("SubTag");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.NotionArticleTag", b =>
                {
                    b.HasOne("Notion.Sync.Api.Models.NotionArticle", "NotionArticle")
                        .WithMany("NotionArticleTags")
                        .HasForeignKey("NotionArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Notion.Sync.Api.Models.Tag", "Tag")
                        .WithMany("NotionArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotionArticle");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.SubTag", b =>
                {
                    b.HasOne("Notion.Sync.Api.Models.Tag", "Tag")
                        .WithMany("SubTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.Article", b =>
                {
                    b.Navigation("NotionArticle")
                        .IsRequired();
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.NotionArticle", b =>
                {
                    b.Navigation("NotionArticleSubTags");

                    b.Navigation("NotionArticleTags");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.SubTag", b =>
                {
                    b.Navigation("NotionArticleSubTags");
                });

            modelBuilder.Entity("Notion.Sync.Api.Models.Tag", b =>
                {
                    b.Navigation("NotionArticleTags");

                    b.Navigation("SubTags");
                });
#pragma warning restore 612, 618
        }
    }
}
